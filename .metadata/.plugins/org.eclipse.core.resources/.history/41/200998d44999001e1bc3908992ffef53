package com.alessandrozaros.course.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import com.alessandrozaros.course.entity.User;
import com.alessandrozaros.course.repositories.UserRepository;
import com.alessandrozaros.course.services.exceptions.DatabaseException;
import com.alessandrozaros.course.services.exceptions.ResourceNotFoundException;

@Service
public class UserService {
	
	@Autowired
	private UserRepository userRepository;
	
	public List<User> findAll() {
		return userRepository.findAll();
	}
	
	public User findById(Long id) {
		Optional<User> obj  = userRepository.findById(id); // vai no banco de dados e busca o obj
		return obj.orElseThrow(() -> new ResourceNotFoundException(id));
	}
	
	public User insert(User obj) {
		return userRepository.save(obj);
	}
	
	public void delete(Long id) {
		try {
		userRepository.deleteById(id);
		}
		catch() {
			
		}
		catch(DataIntegrityViolationException e) {
			throw new DatabaseException(e.getMessage());
		}
	}
	
	public User update(Long id, User obj) {
		User entity = userRepository.getReferenceById(id); // monitora , mas ainda não busca o obj, so prepara para poder ser alterado
		updateData(entity, obj); //atualizar os dados de entity, baseado nos dados de obj
		return userRepository.save(entity);
	}

	private void updateData(User entity, User obj) {
		entity.setName(obj.getName());
		entity.setEmail(obj.getEmail());   //Nos escolhemos o que atualizar pelo método. Senha e Id não poderão ser atualizados pelo método.
		entity.setPhone(obj.getPhone());
	
	}
}
